#include<iostream>
#include<list>
using namespace std;

int main()
{
	//list는 노드 기반 컨테이너로 at()과 []연산자가 없으며 임의 접근 반복자가 아닌 양방향 반복자를 제옥합니다.
	//그래서 모든 원소를 탐색하려면 양방향 반복자의 연산인 ++,-- 를 사용합니다.
	
	list<int> lt;
	
	lt.push_back(10);
	lt.push_back(20);
	lt.push_back(30);
	lt.push_back(40);
	lt.push_back(50);
	
	list<int>::iterator iter = lt.begin();
	list<int>::iterator iter2;
	++iter;
	++iter;
	
	//배열 기반의 컨테이너의 경우 원소의 삽입과 제거동작이 발생하면 메모리가 재할당 되거나 원소가 이동할 수 있으므르 반복자가 무효화 되지만
	//list의 경우는 아니다
	iter2 = lt.erase(iter);//iter는 30이다
	
	cout<<"iter2 :"<<*iter2<<endl;
	
	iter = iter2;
	iter2 = lt.insert(iter, 300);//iter가 가르키는 위치에 300을 넣는다 300->40->50 (iter의 뒤에 들어감)
	
	cout<<"iter :"<<*iter<<endl;
	cout<<"iter2 :"<<*iter2<<endl;
	
	//list는 splice와 merge(정렬 후 결합)을 이용해서 서로 다른 두 list를 결합할 수 있다.
	return 0;
}