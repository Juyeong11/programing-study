#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

bool Pred(int n)
{
	return 30 <= n && n <= 40;
}

bool Predu(int left,int right)
{
	return abs(left-right) < 10;
}
int main()
{
	//제거 알고리즘은 원소를 수정하는 알고리즘의 특수한 형태입니다.
	//원소를 실제로 제거하지 않고 논리적으로 제거(다음원소로 덮었쓰기)하기 때문에 순차열의 size를 실제로 변경하지 않습니다.
	//실제 사이즈를 변경하려면 컨테이너의 erase멤버 함수를 이용하면 됩니다.
	vector<int> v;
	v.push_back(10);
	v.push_back(20);
	v.push_back(30);
	v.push_back(40);
	v.push_back(50);
	v.push_back(30);
	v.push_back(30);

	vector<int>::iterator iter_end;
	iter_end = remove(v.begin(), v.end(), 30);//30인 원소가 있으면 다음원소로 덮어 쓴다. 그 다음 원소도 다음원소로 덮어씀
	//만약 지우려는 원소가 마지막 값이면 지워지지 않는다.
	for(int& a: v)
		cout<<a<<", ";
	cout<<endl;
	v.erase(iter_end,v.end());//이렇게 해서 30인 원소를 지우고 size값도 변경할 수 있다.
	
	iter_end = remove_if(v.begin(), v.end(), Pred);//조건자를 이용한 remove
	
	
	
	vector<int> v1(5);
	iter_end = remove_copy(v.begin(),v.end(),v1.begin(),50);//v1에 50을 제외하고 넣는다 앞으로 미뤄서 50이 있는 만큼 뒤에 0이 들어감
	//v1.begin()~iter_end() 50을 제외한 모든 원소를 출력함
	for(int& a: v1)
		cout<<a<<", ";
	cout<<endl;
	
	vector<int> u;
	u.push_back(10);
	u.push_back(20);
	u.push_back(30);
	u.push_back(30);
	u.push_back(40);
	u.push_back(50);
	u.push_back(30);
	u.push_back(30);
	
	iter_end = unique(u.begin(),u.end());//인접한 중복원소를 유일하게 만들어 준다. remove와 동일하게 size는 변함없다.
	//인접원소만 제거해주기 때문에 떨어져 있으면 제거 안해줌
	for(int& a: u)
		cout<<a<<", ";
	cout<<endl;
	
	iter_end = unique(u.begin(), u.end(),Predu);//조건자 버전
}