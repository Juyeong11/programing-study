#include<iostream>
#include<set>

using namespace std;

int main()
{
	//set컨테이너는 연관 컨테이너 중 단순한 컨테이너로 key라 불리는 원소(value)의 집합으로 이루어진 컨테이너입니다.
	//모든 연관 컨테이너는 노드 기반 컨테이너이며 균형 이진 트리로 구현되므로 균형 이진 트리의 모든 특징을 가집니다.
	//그리고 모두 같은 인터페이스를 제공합니다.
	
	set<int> s;
	
	pair<set<int>::iterator, bool> pr;
	
	pr = s.insert(50);// 50을 s에 삽입하고 결과를 pr에 저장합니다. pr.first는 50 원소를 가르키는 반복자이며 pr.second는 삽입 성공, 삽입 실패 결과입니다.
	
	s.insert(40);
	
	if(pr.second)
		cout<<"성공"<<endl;
	
	pr = s.insert(50);
	if(!pr.second)//!있어요 확인 꼭 할것
		cout<<"실패"<<endl;
	
	s.insert(pr.first, 55);//pr.first가 가르키는 위치 부터 탐색을 시작하여 55를 삽입합니다.
	
	s.insert(30);
	s.insert(70);
	s.insert(10);
	s.insert(20);	
	s.insert(40);
	s.insert(60);
	
	for(int a: s)
		cout<<a<<endl;
	
	
	set<int, greater<int>> s1;
	set<int, less<int>> s2;//-> 조건자를 이용하여 정렬 조건을 바꿀 수 있다.

	cout<<s.count(50)<<endl;//count 로 원소의 갯수를 샐 수 있다. 중복이 안되는데 굳이?-> 모든 연관컨테이너의 멤버함수가 같기 때문
	
	cout<<*s.find(50)<<endl;// 찾는 원소가 있다면 해당 원소의 반복자를 반환하고 없다면 end()반복자를 반환한다.
	//여기서 주의 해야 할 점은 해당 원소를 찾을때 연산자 == 를 사용하지 않는 다는 것이다.
	//!(a<b) && !(b<a) 를 사용하여 a가 b보다 앞서있지않고 b도 a보다 앞서 있지 않는다면 같다고 판단한다.
	
	set<int>::iterator iter_lower = s.lower_bound(30);//30이 시작하는 구간이 반복자입니다. 비교 결과 주어진 값보다 먼저 나오지 않는 값
	set<int>::iterator iter_upper = s.upper_bound(30);//30이 끝나는 구간의 반복자 즉 다음 수를 가르킨다. 비교 결과 주어진 값보다 나중에 나오는 값
	//찾는 키가 없는 경우 lower_bound는 작지 않은 최초의 원소 upper_bound는 크지않은 최초의 원소를 반환한다.
	pair<set<int>::iterator, set<int>::iterator> iter_pair;
	
	iter_pair = s.equal_range(11);// lower반복자와 upper반복자를 pair로 반환해준다.
	
	cout<<*iter_pair.first<<", "<<*iter_pair.second<<endl;
	
	multiset<int> ms;
	
	ms.insert(50);
	ms.insert(30);
	ms.insert(80);
	ms.insert(80);
	ms.insert(30);
	ms.insert(70);
	ms.insert(10);

	multiset<int>::iterator iter;
	
	for(int a: ms)
		cout<<a<<" ,";
	cout<<endl;
	
	cout<<ms.count(30)<<endl;
	
	multiset<int>::iterator iter_lower1 = ms.lower_bound(30);//ㅋ
	multiset<int>::iterator iter_upper1 = ms.upper_bound(30);

	cout<<*iter_lower1<<" "<<*iter_upper1<<endl;
	
	return 0;
}