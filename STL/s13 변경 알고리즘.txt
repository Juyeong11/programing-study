#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

bool Pred_permutation(const int left, const int right)
{
	return left < right;
}

bool Pred_part(int n)
{
	return n < 25;
}
int main()
{
	//변경 알고리즘은 원소의 순서를 변경하는 알고리즘입니다. 원소의 순서를 순열처럼 변경할 때 next_permutation과 prev_permutation()알고리즘을 사용합니다.
	vector<int> v;
	v.push_back(10);
	v.push_back(20);
	v.push_back(30);
	v.push_back(40);
	v.push_back(5);
	while(next_permutation(v.begin(),v.end()))//해당구간의 순차열을 사전순으로 배열한다. 이 때 사전순으로 한단계씩 바꾸며 더 이상 바꿀 수 없으면 false를 반환한다.
	{
		for(int& a: v)
			cout<<a<<", ";
	cout<<endl;
	}
	
	while(next_permutation(v.begin(),v.end(), Pred_permutation))//조건자를 이용하여 정렬 조건을 바꿀 수 있다.
	{
		for(int& a: v)
			cout<<a<<", ";
	cout<<endl;
	}
	//prev_permutation은 next와는 다르게 순차열 이전 순열을 만들어 낸다. 그 외에는 모두 똑같다.
	
	
	v.erase(v.begin(),v.end());
	v.push_back(40);
	v.push_back(10);
	v.push_back(20);
	v.push_back(30);
	v.push_back(25);
	v.push_back(5);
	
	
	vector<int>::iterator iter_sep;
	
	
	
	iter_sep = partition(v.begin(), v.end(), Pred_part);//pivot값을 기준으로 정렬하듯 조건자의 값을 기준으로 나누면서 정렬한다. 그리고 해당 값의 반복자를 반환한다.
	//시작과 끝에서 오면서 조건을 기준으로 값을 바꾸면서 중간으로 온다.
	
	for(vector<int>::iterator iter = v.begin(); iter != iter_sep; ++iter)
		cout<<*iter<<", ";
	cout<<endl;
	for(vector<int>::iterator iter = iter_sep; iter != v.end(); ++iter)
		cout<<*iter<<", ";
	cout<<endl;
	
	v.erase(v.begin(),v.end());
	v.push_back(40);
	v.push_back(10);
	v.push_back(20);
	v.push_back(30);
	v.push_back(25);
	v.push_back(5);
	
	iter_sep = stable_partition(v.begin(), v.end(), Pred_part);//원소의 상대적인 순서를 유지하며 20미만과 20이상의 원소를 분류
	
	for(vector<int>::iterator iter = v.begin(); iter != iter_sep; ++iter)
		cout<<*iter<<", ";
	cout<<endl;
	for(vector<int>::iterator iter = iter_sep; iter != v.end(); ++iter)
		cout<<*iter<<", ";
	cout<<endl;
	
	random_shuffle(v.begin(),v.end());//순차열을 뒤섞어 줌 srand를 사용하는 걸로봐서 최신버전에서는 다를거 같음 찾아보자
	
	reverse(v.begin(),v.end());//순차열을 뒤집음
	for(int& a: v)
		cout<<a<<", ";
	cout<<endl;
	//reverse_copy(v1.begin(), v1.end(), v2.begin()) 순차열을 뒤집은걸 v2에 복사하는 알고리즘
	
	vector<int>::iterator iter_mid = v.begin()+3;
	rotate(v.begin(),iter_mid,v.end());// 왼쪽으로 mid - end만큼 회전한다.
	for(int& a: v)
		cout<<a<<", ";
	cout<<endl;
	
	//rotate_copy(v.begin(),iter_mid,v.end(),v1.begin()) 회전시킨 순차열을 v1에 복사한다.
}