함수 객체의 장점
함수 객체는 함수처럼 동작하는 객체이므로 다른 멤버 변수와 멤버 함수를 가질 수 있고 일반 함수에서 하지 못하는 지원을 받을 수 있습니다.
또한, 함수 객체의 서명이 같더라도 객체 타입이 다르면 서로 전혀 다른 타입으로 인식합니다. 속도도 일반 함수보다 함수 객체가 빠릅니다.
함수의 주소를 전달하여 콜백하는 경우 이 함수 포인터는 인라인될 수 없지만(함수 포인터는 함수가 있어야 하므로 인라인 함수의 복사본 함수를 만들어냄)
함수 객체는 인라인될 수 있고, 컴파일러가 쉽게 최적화 할 수 있습니다.
/*
#include<iostream>

using namespace std;

class Adder
{
	int total;
	public:
	explicit Adder(int n=0):total(n){}
	
	int operator()(int n)
	{
		return total += n;
	}
};

int main()
{
	Adder add(0);
	
	cout<<add(10)<<endl;
	cout<<add(20)<<endl;
	
	return 0;
}*/

/*
//STL less 예제
#include<iostream>
#include<functional> // less<>헤더
using namespace std;

bool Pred_less(int a, int b)
{
	return a<b;
}

//struct Less
//{
//	bool operator() (int a, int b)
//	{
//		return a<b;
//	}
//};

typedef less<int> Less;// 짧게 쓸려고 한거에요 의미없어

int main()
{
	Less l;
	
	cout<< Pred_less(10,20)<<endl;
	cout<<endl;
	
	cout<<l(10,20)<<endl;
	cout<<Less()(20,10)<<endl;//암시적 호출
	cout<<endl;
	
	cout<<l.operator()(10,20)<<endl;//명시적 호출
	
	return 0;
	
}*/

//2번
#include<iostream>

using namespace std;

class Equal
{
	
	public:
	explicit Equal(){}
	
	bool operator()(int a, int b)
	{
		return a == b;
	}
};

int main()
{
	Equal cmp;
	
	cout<<cmp(10,10)<<endl;
	
	
	return 0;
}

//3번
/*#include<iostream>

using namespace std;

class Adder
{
	int total;
	public:
	explicit Adder(int n=0):total(n){}
	
	int operator()(int a, int b)
	{
		return total = a + b;
	}
};

int main()
{
	Adder add(0);
	
	cout<<add(10,20)<<endl;
	
	
	return 0;
}*/
