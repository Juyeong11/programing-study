항목 26: 변수 정의는 늦출 수 있는 데까지 늦추는 근성을 발휘하자

 변수를 성급하게 생성하게 되면 사용되지 않는 변수임에도 불구하고
불필요한 비용이 들 수도 있다.

 어떤 변수를 사용해야 할 때가 오기 전까지 변수의 정의를 늦추는 것은 기본이고
초기화 인자를 손에 넣기전 까지 정의를 늦출 수 있는지도 둘러 봐야 한다.
이렇게 해야 쓰지도 않을 객체가 만들어 졌다 없어지는 일이 생기지 않으며, 불필요한
기본 생성자 호출도 일어나지 않는다. 덤으로, 누가 보아도 그 변수의 의미가 명확한
상황에서 이루어지기 때문에, 변수의 쓰임새를 문서화 하는데도 도움이 된다.

항목 27: 캐스팅은 절약, 또 절약! 잊지 말자

 (T) 표현식 T(표현식)모두 구형 스타일의 캐스트이다. c++스타일의 4가지 방법의 캐스트를 쓰자
하지만 안 쓸방법을 고민 또 고민한 후 최후로 쓰도록 하자 보기엔 맞는거 같아도 실제로는 
틀린경우가 많다.

 파생클래스 객체에 대한 기본클래스 포인터를 만드는 코드에서 두포인터의 값이 같지
않을 수 있다. *기본클래스 = &파생클래스
이런경우 포인터 변위를 기본클래스*포인터에 적용하여 실제의 파생클래스*포인터 값을
구하는 동작이 런타임에 이루어진다.

c++을 쓸 때는 데이터가 어떤 식으로 메모리에 박혀 있을거라는 섣부른 가정은 피하도록 하자

만약 캐스팅을 한다면 최대한 격리 시켜 사용자가 호출하여 쓸 수 있다록 하자.
