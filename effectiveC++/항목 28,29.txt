28: 내부에서 사용하는 객체에 대한 핸들을 반환하는 코드는 되도록 피하자

핸들(handle) : 다른 객체에 손을 댈 수 있게 하는 메개자

 내부에서 사용하는 객체의 핸들을 반환하게 되면 사용자가 그 객체를 수정 할 수 있게 될 수도 있다(비트 수준 상수성의 한계)
그래도 이것은 반환타임에 const를 하면 해결 되지만 한가지 문제가 더 있다.

 바로 무효 참조 핸들로서 핸들이 있긴하지만 그 핸들을 따라 갔을 때 실제 객체의 데이터가 없는 것이다. 
바깥으로 떨어져 나간 핸들이 그 핸들이 참조하는 객체 보다 더 오래 살 위험이 있기 때문이다


29: 예외 안전성을 꼭 확보하자.

예외 안정성이 보장되지 않으면 자원이 누출될 수도 있고, 자료구조가 더렵혀 질 수도 있다.

함수에서 보장할 수 있는 예외 안전성 보장
	
	- 기본적 보장
	 함수 동작 중에 예외가 발생하면, 실행 중인 프로그램에 관련된
	 모든 것들을 유효한 상태로 유지하겠다는 보장
	
	- 강력한 보장
	 예외가 발생하면 프로그램의 상태를 절대로 변경하지 않겠다는 보장
	 ex) 복사-후-맞바꾸기

	- 예외불가 보장


자원관리 객체를 이용하여 예외 안전성 보장 가능

{
	lock(&mutex);
	
	delete bgimage;
	++imagechange;
	bhimage = new Image(imgSrc); // 예외 발생시 증가된 변수와 삭제된 자원이 오류를 일으킨다.

	unlock(&mutex);// 위에서 예외 발생시 락이 안 풀릴 수 있다.
}

*어떤 함수가 제공하는 예외 안정성 보장의 강도는 그 함수가 내부적으로 호출하는 함수들이 제공하는 가장 약한 보장을 넘지 않습니다.
